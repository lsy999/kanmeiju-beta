package com.mrpi.kanmeiju.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "MEIJU".
*/
public class MeijuDao extends AbstractDao<Meiju, Long> {

    public static final String TABLENAME = "MEIJU";

    /**
     * Properties of entity Meiju.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property VideoId = new Property(1, String.class, "videoId", false, "VIDEO_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Desc = new Property(3, String.class, "desc", false, "DESC");
        public final static Property Follow = new Property(4, Boolean.class, "follow", false, "FOLLOW");
        public final static Property Episode = new Property(5, String.class, "Episode", false, "EPISODE");
        public final static Property Picture = new Property(6, String.class, "picture", false, "PICTURE");
        public final static Property Date = new Property(7, java.util.Date.class, "date", false, "DATE");
        public final static Property Url = new Property(8, String.class, "url", false, "URL");
        public final static Property HasUpdate = new Property(9, Boolean.class, "hasUpdate", false, "HAS_UPDATE");
        public final static Property Click = new Property(10, Integer.class, "click", false, "CLICK");
        public final static Property Local = new Property(11, String.class, "local", false, "LOCAL");
    };


    public MeijuDao(DaoConfig config) {
        super(config);
    }
    
    public MeijuDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEIJU\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"VIDEO_ID\" TEXT," + // 1: videoId
                "\"NAME\" TEXT NOT NULL ," + // 2: name
                "\"DESC\" TEXT," + // 3: desc
                "\"FOLLOW\" INTEGER," + // 4: follow
                "\"EPISODE\" TEXT," + // 5: Episode
                "\"PICTURE\" TEXT," + // 6: picture
                "\"DATE\" INTEGER," + // 7: date
                "\"URL\" TEXT," + // 8: url
                "\"HAS_UPDATE\" INTEGER," + // 9: hasUpdate
                "\"CLICK\" INTEGER," + // 10: click
                "\"LOCAL\" TEXT);"); // 11: local
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEIJU\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Meiju entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String videoId = entity.getVideoId();
        if (videoId != null) {
            stmt.bindString(2, videoId);
        }
        stmt.bindString(3, entity.getName());
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(4, desc);
        }
 
        Boolean follow = entity.getFollow();
        if (follow != null) {
            stmt.bindLong(5, follow ? 1L: 0L);
        }
 
        String Episode = entity.getEpisode();
        if (Episode != null) {
            stmt.bindString(6, Episode);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(7, picture);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(8, date.getTime());
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(9, url);
        }
 
        Boolean hasUpdate = entity.getHasUpdate();
        if (hasUpdate != null) {
            stmt.bindLong(10, hasUpdate ? 1L: 0L);
        }
 
        Integer click = entity.getClick();
        if (click != null) {
            stmt.bindLong(11, click);
        }
 
        String local = entity.getLocal();
        if (local != null) {
            stmt.bindString(12, local);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Meiju readEntity(Cursor cursor, int offset) {
        Meiju entity = new Meiju( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // videoId
            cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // desc
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // follow
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Episode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // picture
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // date
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // url
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // hasUpdate
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // click
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // local
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Meiju entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVideoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setDesc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFollow(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setEpisode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPicture(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHasUpdate(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setClick(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setLocal(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Meiju entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Meiju entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
